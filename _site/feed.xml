<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小智|主页</title>
    <description>为自己留退路的人，最终都走在退路上。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 16 Dec 2017 01:24:52 +0800</pubDate>
    <lastBuildDate>Sat, 16 Dec 2017 01:24:52 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>巅峰之路</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;我的目标只有AT，也知道AT的面试难度绝对非泛泛之辈。历经秋季发生的种种失望，我铁下心来，也决定采取行动了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这是一篇经验之谈，不会聊及技术细节等。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;预备工作&quot;&gt;预备工作&lt;/h2&gt;
&lt;p&gt;6月份前后，已经有不少猎头找到我，我也留下他们的联系方式。高水平的猎头往往能提供有价值的岗位，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;深圳蚂蚁金服&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;北京Face++&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;阿里摩达学院&lt;/code&gt;等。
接触某些猎头后，我提前让他们提供我感兴趣的岗位的&lt;strong&gt;Job Description&lt;/strong&gt;，以便我做对应的准备。&lt;/p&gt;

&lt;h3 id=&quot;基础与项目&quot;&gt;基础与项目&lt;/h3&gt;
&lt;p&gt;在面试预准备阶段，结合我对不同公司的风格和一些岗位的JD，我给自己规划了几个大概的方向：&lt;strong&gt;C++基础语法&lt;/strong&gt;，&lt;strong&gt;网络编程&lt;/strong&gt;，&lt;strong&gt;Java基础&lt;/strong&gt;，&lt;strong&gt;并发编程&lt;/strong&gt;，&lt;strong&gt;系统架构设计&lt;/strong&gt;，&lt;strong&gt;开源架构/组件&lt;/strong&gt;，&lt;strong&gt;Linux 
Shell&lt;/strong&gt;，&lt;strong&gt;项目经验&lt;/strong&gt;等。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;或者你会好奇为什么Java工程师会将&lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt;作为Interview准备的一部分。
 相信我，你心中早就有答案了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;系统与领域&quot;&gt;系统与领域&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;系统架构设计&lt;/strong&gt;与&lt;strong&gt;项目经验&lt;/strong&gt;是一块非常庞大的部分，就我参与过的项目里，主要分为两种类型的后端服务：&lt;strong&gt;数据读写服务&lt;/strong&gt;，&lt;strong&gt;交易系统&lt;/strong&gt;。
不同类型的后端服务的设计需求也截然不同：&lt;strong&gt;数据读写服务&lt;/strong&gt;的要求是&lt;code class=&quot;highlighter-rouge&quot;&gt;高性能读写&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;系统高可用&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;高容灾能力&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;数据持久化&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;异地多活&lt;/code&gt;等；
而对于典型的&lt;strong&gt;交易系统&lt;/strong&gt;，设计要求则需要解决诸多典型的领域问题：&lt;code class=&quot;highlighter-rouge&quot;&gt;分布式唯一递增ID方案设计&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;支付安全性设计&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;支付架构&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;订单幂等性&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;超时重试&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;状态机转移&lt;/code&gt;等。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;项目的定位很重要，要有清晰的认识。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;java网络编程newio&quot;&gt;Java网络编程:NewIO&lt;/h3&gt;
&lt;p&gt;值得一提的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;，在我接触过的业务开发里，并不需要直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;，作为程序底层编程基础部分、已被各种常用框架屏蔽掉的&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NewIO&lt;/code&gt;，在面试中到底是多重要呢？
就我后来面试的经历中，「&lt;strong&gt;了解/熟悉/精通Java NIO&lt;/strong&gt;」会成为一个十分重要的加分项，被问询到的概率也很高。至于面试官是否对候选人做相应的考核，这还是会取决于具体的职位需求。
在很早前，其中一位猎头提供的&lt;strong&gt;蚂蚁金服创新业务&lt;/strong&gt;的一个JD里，就有明确的「熟悉网络编程、&lt;code class=&quot;highlighter-rouge&quot;&gt;Netty&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;优先」条件，
为此，在面试的预备阶段，我将&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;作为一个大的方向做准备。在启动全面准备前，我特意花了2周阅读了&lt;code class=&quot;highlighter-rouge&quot;&gt;Thrift&lt;/code&gt;JAVA实现及&lt;code class=&quot;highlighter-rouge&quot;&gt;Netty&lt;/code&gt;的实现，主要途径是阅读代码，攻关NIO部分。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;是通信层最为关注的领域之一。而除了NIO，通信层RPC还包括了&lt;code class=&quot;highlighter-rouge&quot;&gt;序列化&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket编程&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP粘包/拆包&lt;/code&gt;等诸多领域问题。
在攻克&lt;code class=&quot;highlighter-rouge&quot;&gt;RPC&lt;/code&gt;做的准备，我主要看完了&lt;code class=&quot;highlighter-rouge&quot;&gt;Thrift&lt;/code&gt;的Java实现，&lt;code class=&quot;highlighter-rouge&quot;&gt;thrift java&lt;/code&gt;主要包括了 &lt;em&gt;类和接口代理模式&lt;/em&gt;、&lt;em&gt;均衡负载&lt;/em&gt;、&lt;em&gt;NIO&lt;/em&gt;、&lt;em&gt;MTraceBinary协议实现&lt;/em&gt;、&lt;em&gt;高可用功能&lt;/em&gt;等。
更多的NIO理论知识与实践，可以参考&lt;code class=&quot;highlighter-rouge&quot;&gt;React设计模式&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Netty&lt;/code&gt;，结合代码学习，颇有收益。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NIO是后端工程师必须了解甚至掌握的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;架构理论扩充&quot;&gt;架构理论扩充&lt;/h3&gt;
&lt;p&gt;为了补充架构设计的短板，我花了4天的时间复习了一遍「&lt;strong&gt;亿级流量网站架构核心技术&lt;/strong&gt;」这本书。身边有朋友吐槽这本书质量很差，这里不予置评。
我阅读这本书，主要是要吸取了一些非常重要的概念，包括&lt;em&gt;如何支持高并发&lt;/em&gt;、&lt;em&gt;如何构建高可用&lt;/em&gt;，并扩充以前在两类项目中没学习完整的理论体系。
看完这本书，并非能让你在短时间内编出一个虚构的、完美的项目经历，而是通过整体性的总结，回顾以前的项目，找出以前的不足，总结以前参与过的项目里的问题、积累经验、思考设计优化等等。&lt;/p&gt;

&lt;h2 id=&quot;准备篇-1-知识深化&quot;&gt;准备篇 #1 知识深化&lt;/h2&gt;
&lt;p&gt;大家一定注意到，刚才的说到的只是预准备。其中&lt;strong&gt;系统架构设计&lt;/strong&gt;部分，是我在后来做的总结（在预备期我并没总结得这么全）。有了一个大概的预备期，接下来，这才是巅峰之路的启程。
我准备的大概思路大概是：Java基础为主，基础以并发为主、JVM为辅，逐渐（边面试边攻克）解决项目部分，最后再攻克开源部分。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请坐稳扶好，我准备开车了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;11-并发编程篇&quot;&gt;1.1 并发编程篇&lt;/h3&gt;
&lt;p&gt;经历过那么多Java岗位的面试，&lt;code class=&quot;highlighter-rouge&quot;&gt;并发&lt;/code&gt;无疑是热门的基础问题Top 1。在准备&lt;code class=&quot;highlighter-rouge&quot;&gt;并发&lt;/code&gt;这部分内容时，我使用得不多，对于那时的我来很迷茫，也没有人指点在哪个方向准备起：
这个究竟是个经验的问题，有多少功力也不是靠背书读概念就积累起来的。但是总不能坐以待毙吧？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你肯定想问我，你还没面试怎么就知道「并发」是top1热门？
告诉你，面试启动之前，我找了些同事沟通，以及结合百度做参考的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;111-volatile关键字&quot;&gt;1.1.1 volatile关键字&lt;/h4&gt;
&lt;p&gt;有人提点了我一些基础的内容，没错，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Java并发&lt;/code&gt;的三大基础之一，&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;修饰符。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;的基础要点:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有哪三大特性？&lt;/li&gt;
  &lt;li&gt;如何保证可见性？&lt;/li&gt;
  &lt;li&gt;为什么不保证操作原子性？&lt;/li&gt;
  &lt;li&gt;禁止指令重排序的原理？&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：并发是java top1问题；volatile是并发的top1问题。Java并发3大基础还有2个，后文有所提及。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;112-内存屏障内存模型&quot;&gt;1.1.2 内存屏障/内存模型&lt;/h4&gt;
&lt;p&gt;如果你在volatile上提到了指令重排序，接下来很有可能会问到内存屏障相关问题，内存屏障的实质就是将底层CPU指令做了顺序限制。有兴趣可以了解一下相关的博客。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JMM的原理要点&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JMM(Java Memory Model)的工作原理是什么？&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;113-线程状态和monitor&quot;&gt;1.1.3 线程状态和Monitor&lt;/h4&gt;
&lt;p&gt;线程状态比较容易理解，但要注意一点：操作系统的线程状态和Java的线程状态是有区别的。
操作系统的线程状态有5个：新建、就绪、运行、阻塞、结束。
而Java线程状态则有6种：&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;running&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;blocking&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;time wait&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;runnable&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;dead&lt;/code&gt;。
关于Java的线程状态大有学问：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java线程的time wait和blocking区别是什么？&lt;/li&gt;
  &lt;li&gt;线程状态之间的转移条件？&lt;/li&gt;
  &lt;li&gt;怎么理解线程Monitor？&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.java&lt;/code&gt;对Java线程状态转移的内容做了十分详细的注释，建议没看过的看一下，对于打扎实Java多线程编程基础有一定帮助。
线程状态及转移比较基础，面试问到的频率比较低。线程monitor则是实现上的一个概念，有必要理解一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;114-并发同步集合&quot;&gt;1.1.4 并发/同步集合&lt;/h4&gt;
&lt;p&gt;并发/同步集合是&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent&lt;/code&gt;（JUC）里常用的数据结构。&lt;/p&gt;

&lt;p&gt;并发集合主要包括几个经典的集合：&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyOnWriteArrayList&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedBlockingQueue&lt;/code&gt;等。
&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt;比较常用，是程序员必须掌握的。
&lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedBlockingQueue&lt;/code&gt;是生产者/消费者模式的实现，也是线程池默认队列，也必须掌握。
&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyOnWriteArrayList&lt;/code&gt;建议掌握，问得比较少.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt; 在JDK1.6采用了分段+数组+链表，其中，段继承了重入锁&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt; 在JDK1.7则采用了无锁cas代替了重入锁&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt; 在JDK1.8则是将链表部分做了优化，在链表长度大于8时升级为红黑树&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedBlockingQueue&lt;/code&gt; 本身就是生产者/消费者模式的实现&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LinkedBlockingQueue提供了好几个 &lt;strong&gt;生产&lt;/strong&gt; 和 &lt;strong&gt;消费&lt;/strong&gt; 的方法，它们的区别在于获取&lt;code class=&quot;highlighter-rouge&quot;&gt;putLock&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;takeLock&lt;/code&gt;时，采用的重入锁的不同&lt;code class=&quot;highlighter-rouge&quot;&gt;lock&lt;/code&gt;方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;lock()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;lockInterruptibly()
&lt;/code&gt;。详情参考JDK代码，深刻理解这部分代码，对生产者/消费者模型的理解十分有帮助。&lt;/p&gt;

&lt;p&gt;例如&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedBlockingQueue&lt;/code&gt;&lt;/strong&gt;的两个生产方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /**
         * Inserts the specified element at the tail of this queue, waiting if
         * necessary up to the specified wait time for space to become available.
         *
    */
    offer(E,long,TimeUnit);
    ...
    
    /**
         * Inserts the specified element at the tail of this queue, waiting if
         * necessary for space to become available.
         *
    */
    put(E);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;在实现可指定等待参数中，主要是&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;await()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;awaitNanos(long)&lt;/code&gt;方法来实现。详见代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了集合，还有常用的辅助类:&lt;code class=&quot;highlighter-rouge&quot;&gt;CyclicBarrier&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;CountDownLaunch&lt;/code&gt;。在代码里我只用过&lt;code class=&quot;highlighter-rouge&quot;&gt;CountDownLaunch&lt;/code&gt;，属于比较常用和必须掌握的基础。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CountDownLaunch&lt;/code&gt;&lt;/strong&gt;主要是等待未完成的线程直到&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;的数量达到预设值，才会允许主程序继续执行。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CyclicBarrier&lt;/code&gt;&lt;/strong&gt;则主要是限制多个线程的执行初始时间。当CyclicBarrier调用数达到预设值，各个相关子线程才可以执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CountDownLaunch&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;CyclicBarrier&lt;/code&gt;在笔试经常考察，必须要掌握。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;115-线程池&quot;&gt;1.1.5 线程池&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;线程池&lt;/strong&gt;大家都一定很熟悉，通常用于处理异步事件。线程池也是面试的高频热点。
根据我不同的面试体验，我对线程池这部的内容体会是，每次面试都让我感到我对线程池的认知是不足的。
建议大家读一下线程池的代码，包含几个要点，也是我面试常遇到的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;keep_alive参数的作用？&lt;/li&gt;
  &lt;li&gt;core_size/largest_size含义？&lt;/li&gt;
  &lt;li&gt;线程池工作流程？&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;线程的生命周期？&lt;/p&gt;

    &lt;p&gt;线程池的各个初始化参数是必须要了解的，高频题目。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习&lt;strong&gt;线程池&lt;/strong&gt;时，值得一提的一个内容是&lt;code class=&quot;highlighter-rouge&quot;&gt;线程池的状态&lt;/code&gt;。状态的转移比较难理解，在面试的时候也很少出现。但是理解线程池的状态转移有助于对线程池的理解加深。
我在学习线程池的时候主要是几个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;worker的实现/生命周期管理&lt;/li&gt;
  &lt;li&gt;新创建线程的流程&lt;/li&gt;
  &lt;li&gt;带返回值的task的.submit(Runnable)方法的实现原理&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;线程池部分学得不深，不敢班门弄斧。多多指教！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;116-synchronized和reetrantlock&quot;&gt;1.1.6 Synchronized和ReetrantLock&lt;/h4&gt;
&lt;p&gt;这个题目基本不用多解释了，高频题目系列。它们&lt;strong&gt;关键区别&lt;/strong&gt;在于synchronized是&lt;em&gt;基于字节码实现的&lt;/em&gt;，lock是&lt;em&gt;基于系统信号量实现的&lt;/em&gt;。在面试的时候，这两者的尽量讲详细点。
除了实现上，lock还提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;tryLock()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;lockInterupt()&lt;/code&gt;方法。这两方法的实现细节见代码详情。除此外，synchronized是一直阻塞的，但lock提供了可中断机制。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java提供的中断机制包括了很多知识点，建议大家准备一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReetrantLock&lt;/code&gt;的默认Lock是非公平锁。&lt;code class=&quot;highlighter-rouge&quot;&gt;Lock&lt;/code&gt;还提供了公平锁。这两者的区别在于获取锁的时候是否直接进入队列。这是必懂知识点。
而它的实现原理部分是高级面试题里的常客，即&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractQueuedSynchronizer(AQS)&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;117-abstractqueuedsynchronizer&quot;&gt;1.1.7 AbstractQueuedSynchronizer&lt;/h4&gt;
&lt;p&gt;我在阿里某个技术部门里的一面时就被问到了这个。主要是考察对&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractQueuedSynchronizer&lt;/code&gt;的状态唤醒实现，锁实现原理的理解。
&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractQueuedSynchronizer&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;JUC&lt;/code&gt;诸多并发工具的抽象父类，了解相当必要。
&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractQueuedSynchronizer&lt;/code&gt;抽象了互斥资源和竞争资源对象的队列模型。在&lt;code class=&quot;highlighter-rouge&quot;&gt;tryAcquire(int)&lt;/code&gt;里定义了一系列操作。底层实现借助了&lt;code class=&quot;highlighter-rouge&quot;&gt;LarkSupport&lt;/code&gt;类，理解难度比较大。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;尽管理解难度大，作为高阶并发问题，能否深刻理解也是考量你水平的一部分。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;12-开源框架&quot;&gt;1.2 开源框架&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;并发编程&lt;/strong&gt;是我准备的很大一部分，我的简历策略是扬长避短，将熟悉的东西、学会的东西写上去，不懂的只字不提。
所以在后来我找些同事帮我review简历的时候，大家都说我的简历写得很简单。在简历的技术栈环节，我特意消化了一下常用的技术框架来为简历搬砖添瓦。
早期的开源技术栈策略上主要是针对常用的Spring体系，所以目标技术栈有几个&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringMVC&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Thrift&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Jetty&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;MyBatis&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Kafka&lt;/code&gt;等。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我略愁，没有把握的我是不会写的，但有把握的也不多。最终锤炼出来的的简历技术栈也只有3行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;121-jetty&quot;&gt;1.2.1 Jetty&lt;/h4&gt;
&lt;p&gt;Jetty是开源部分准备最早的一个，也是最终准备效果最差的一个。我消化了jetty部分代码，但是基本不会问，参考价值不大。因为面试官也不一定有相关的技术栈。
Jetty主要是针对&lt;code class=&quot;highlighter-rouge&quot;&gt;Http&lt;/code&gt;服务的，如果你所投递的后端工程师没有与前端对接，你基本可以不考虑该部分。&lt;/p&gt;

&lt;h4 id=&quot;122-spring&quot;&gt;1.2.2 Spring&lt;/h4&gt;
&lt;p&gt;说来惭愧，作为一个使用SpringMVC+Spring体系的后端来说，至今还没有吃透它，足以说明我对后端技术没有太大的技术追求。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;要准备一些相关的点，在后续的面试里&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;部分差强人意，我就不误导大家，简单说下我准备的方向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spring如何实现单例模式？&lt;/li&gt;
  &lt;li&gt;Spring如何支持注解的？&lt;/li&gt;
  &lt;li&gt;Spring的启动步骤？工作原理？&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;说到开源项目，面试的题目方向深度，和面试官有关系，又因为我实战经验较浅。我在&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;这部分基本不做功夫。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;13-linux基础与shell编程&quot;&gt;1.3 Linux基础与Shell编程&lt;/h3&gt;
&lt;p&gt;我在简历里有提及到这个专题的，所以准备阶段也稍微备战了一下，一方面这种问题没有把握，策略上是边面试边积累–说白了就是碰运气。&lt;/p&gt;

&lt;p&gt;Linux作为Server服务器开发的主要载体，熟悉linux的系统的重要性自然不言而喻。但面试的时候linux系统问题不会问得很深。
而作为一个后端工程师，甚至说一个程序员，如果你不会Shell，你基本不像一个程序员 :) &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell&lt;/code&gt;的基础功在面试里还是挺受欢迎的，这部分虽然简单但也是高频系列。&lt;/p&gt;

&lt;h4 id=&quot;131-awk与sed&quot;&gt;1.3.1 awk与sed&lt;/h4&gt;
&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;不用解释太多，「用&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;统计一下QPS」这个会吧？&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;什么？不会？回去等通知吧 :)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何将多个文本的关键字快速替换？你懂的。&lt;/p&gt;

&lt;h4 id=&quot;132-linux基础命令&quot;&gt;1.3.2 Linux基础命令&lt;/h4&gt;
&lt;p&gt;在准备的前期，我对&lt;code class=&quot;highlighter-rouge&quot;&gt;linux&lt;/code&gt;基础命令准备的策略是多回顾一下&lt;code class=&quot;highlighter-rouge&quot;&gt;ps -ef&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;iostat&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;netstat&lt;/code&gt;等基础。
在面试中linux系统基础命令的考察大多偏实用性。基本你能掌握常用的问题不大。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;要知道，其实面试官也是一个开发人员，如果不是这方面的专家，也不会问得太深。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，linux基础远不止这些，我特意翻回了我以前写过的脚本shell复习了&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;等一些常用的命令来复习。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;掌握这些还是很有必要的，&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;的考察率超过了&lt;code class=&quot;highlighter-rouge&quot;&gt;60%&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;面试篇-2-小试牛刀&quot;&gt;面试篇 #2 小试牛刀&lt;/h2&gt;
&lt;p&gt;你没有看错，在准备#1篇里，我大部分在准备了&lt;code class=&quot;highlighter-rouge&quot;&gt;java多线程&lt;/code&gt;。但是从&lt;code class=&quot;highlighter-rouge&quot;&gt;NIO&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;jetty&lt;/code&gt;，到&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;，到&lt;code class=&quot;highlighter-rouge&quot;&gt;多线程编程&lt;/code&gt;，我足足从8月底准备到了10月份。匆匆准备完毕后，10月9号，我就投递了第一份简历了。&lt;/p&gt;

&lt;p&gt;为了大家更容易理解，我就不穿插&lt;code class=&quot;highlighter-rouge&quot;&gt;知识巩固&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;面试1&lt;/code&gt;这两部分的内容。准备篇#2将直接介绍Interview中遇到的问题，并作为知识巩固，我是如何操作的。&lt;/p&gt;

&lt;h3 id=&quot;21-转转&quot;&gt;2.1 转转&lt;/h3&gt;
&lt;p&gt;2017.10.18，&lt;strong&gt;转转&lt;/strong&gt;是58同城旗下的业务，公司开设在西小口地铁站的软件园里。
下面是简单而重要的记录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 实现单例模式(写代码)
2 HashMap/ConcurrentHashMap的实现原理
3 手写翻转字符串代码
4 手写翻转一个数代码
5 如何实现订单系统的高可用
6 分布式锁如何实现
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;什么？就这几个题？没错，第一次面试，问了6道题目就请回。除了写代码基本没答上来，没准备充分。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;巅峰之路还没开起来就翻车了，我当时也很绝望。准备了一个多月的第一场Interview竟然在6个问题后折戟沙场，有点受挫。
不过，很快在强大的心理调节下我恢复过来了，毕竟2小时候还有下一场：**链家**。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;22-链家&quot;&gt;2.2 链家&lt;/h3&gt;
&lt;p&gt;2017.10.18，&lt;strong&gt;链家&lt;/strong&gt;，房产中介的龙头，行业地位自然没得说。不过你肯定想说：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;小智，链家你也考虑，太low了吧？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相信你也是明白人，那是不可能的。&lt;/p&gt;

&lt;p&gt;链家的好几个Interviewer都是和我差不多大的小伙子，他们的头衔应该是高级工程师。小伙子们的面试都比较友好，不废话，直接上：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 NIO实现原理
2 项目策略设计和实现
3 并发编程题：轮流打印字符
4 jvm内存模型，收集算法

5 分布式锁如何实现
6 threadpool实现原理
7 redis实现
8 spring mvc的理解
9 spring事务的实现
10 二分查找
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;题目看似很难，不同水平的人闻起来的效果是不相同的。链家问得相对比较容易。
 由于技术终面我表示不会接offer最后不疾而终这也是符合我的想法的。
 还有值得一提的，前两个公司都是一个不靠谱的猎头推荐的，连JD都没有。
 这种水平的猎头只会一心想着将你交易出去，对于他们的水平，各位看官自有评论了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;23-快看漫画&quot;&gt;2.3 快看漫画&lt;/h3&gt;
&lt;p&gt;2017.10.23，&lt;strong&gt;快看漫画&lt;/strong&gt;，我不说你不知道，我说了你也不一定清楚，快看CEO是我校友&lt;strong&gt;伟大的安妮&lt;/strong&gt;开的 :)
JD是社区高级工程师，问题碎片化，简单粗暴：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 如何优化树节点存储(数据结构和存储)
2 实现机器人走迷宫
3 Java实现二分查找；极端情况
4 ThreadPool实现原理

5 二维数组的快速搜索
6 线程中断机制
7 企业支付的设计难点
8 Mysql隔离级别
9 redis的数据淘汰机制
10 redis过期数据清除策略
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;问题挺多的，但问得都没有深度，基本是「回答了」与「答不出来」两种结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;24-快手&quot;&gt;2.4 快手&lt;/h3&gt;
&lt;p&gt;2017.10.30，拥有6亿用户，日活1亿的&lt;strong&gt;快手&lt;/strong&gt;，即便如何被吐槽「低俗」，作为短视频的独角兽还是有它的特点的。与上3个公司不同的是，它的面试风格更大气，面试官水平更高。
JD是商业化开发工程师，问题质量比起之前大大提升，很有大厂风范：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 Spring的@Resource遇到互相注解怎么处理？
2 实现代码：把1到100相加，用10个线程处理
3 项目的设计
4 实现代码：大数相减
5 thrift如何处理高并发请求/编解码实现原理
6 zk原理：如何均衡负载、服务节点注册与断开

7 设计模式：命令者模式实现代码
8 架构设计：feed流的业务场景和功能实现
9 项目设计：如何设计、难点讲解
10 网络图及优化、项目经验了解
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;面试人员的水平明显高出不少。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;25-百度&quot;&gt;2.5 百度&lt;/h3&gt;
&lt;p&gt;2017.11.01，&lt;strong&gt;百度&lt;/strong&gt;狼厂的实力自然不需要太多美言。这场面试的惨败让我正视自己的简历策略和面试对策的严重不足，以及纠正我对部分基础的重视程度。
JD是营销平台AI后端研发组，要求比较多，例如分布式开发经验，精通Zookeeper，精通RPC，精通SpringMVC等。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 JVM内存管理
2 GC触发条件 FullGC如何发生
3 代码实现：模拟赛马比赛的各个环节，起跑、记录成绩
4 线程池的工作流程
5 统计日志的QPS(用awk)
6 项目设计、实现、难点
7 RPC实现原理/epoll的底层原理
8 volatile的工作原理
9 订单ID递增方案的实现
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;基础问题都不是问题，问题是HR告诉我项目经验方面不匹配，这次挫败&lt;strong&gt;让我重新审视、挖掘项目的优势&lt;/strong&gt;。
 这一点，便真正是巅峰之路的起点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;至此，已经是第5个公司了，11月初，我也拿到某个公司的offer，差强人意。但主要是很累，为此我准备中止刷北京offer的进程了。
11月初，虽然`狼厂`的战败颇为可惜，但我深信项目改进还是会逆转这一次挫败。在后面的策略，我将更加技术性的基础服务放在首位。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;运筹篇-3-大展身手&quot;&gt;运筹篇 #3 大展身手&lt;/h2&gt;
&lt;p&gt;有了北京的几个公司的经验，Interview方面非常有心得。不过与此同时，我把业绩明显的项目的首要地位置换到最低，并提拔基础服务为最高、最优项目，
还是略显得担心。同时，因为耀哥的鼓励下，我也大胆地将Interview策略转移到广东的公司上，边玩心跳赌运气，边考验自己的抗压、学习、突破等各方面的极限。&lt;/p&gt;

&lt;h3 id=&quot;31--顺丰科技&quot;&gt;3.1  顺丰科技&lt;/h3&gt;
&lt;p&gt;2017.11.13，&lt;strong&gt;顺丰科技&lt;/strong&gt;：对于广东的每一个公司的机会我都十分珍视，毕竟一不小心，这些公司会成为Plan B-Z。顺丰这种潜力股自然对我来说不言而喻。
社招门槛设得太高，墙外的人都希望看看。顺丰这次的岗位是我的亲师兄（也就是相互认识的）帮我投递的。很快HR就联系我了。
奇怪的是，我再三要求给我提供JD的情况下，HR还是淡然告诉我，这个岗位（高级Java研发）并不设固定JD。
也碰巧，面试人是和我同一届毕业应届生，华工硕士，关键是他刚毕业也来了美团。当然这些都是候选人提问环节得知的。
不多说，上题目&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 单例模式的实现、要点
2 threadlocal的实现、使用
3 Hashmap的实现原理 ConcurrentHashmap的缺点
4 Spring的httpResponse如何使用
5 kafka的零拷贝技术
6 redis淘汰策略
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;顺丰一面并不是很顺利，但毕竟基础部分发挥正常(90分那种)，很快二面有人沟通问我是否愿意过去深圳面试。
 但是不报销哦！入职也不报销哦！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;到这里你就知道结果啦！
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;32-yy语音&quot;&gt;3.2 YY语音&lt;/h3&gt;
&lt;p&gt;2017.11.17，&lt;strong&gt;欢聚时代&lt;/strong&gt;毕竟是上市公司了，在广州也算是前4的公司，我对欢聚时代的机会还是挺注重的，倒是准备起来有心无力，没做过多准备。1面挺能聊的：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 databus是什么？
2 redis如何解决key的分布问题
3 一致性hash是什么
4 nio的工作原理
5 多线程的意义
6 数据中心的架构设计

7 各个项目的设计、实现
8 数据中心的类设计体系
9 rpc客户端的工作流程
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;时间过了很久了，题目没记得很清楚。大体上聊的就是这些。没想到过关了，所以后来12月2号身在广州，YY提供了想成报销。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;33-阿里巴巴&quot;&gt;3.3 阿里巴巴&lt;/h3&gt;
&lt;p&gt;2017.11.24，&lt;strong&gt;阿里巴巴&lt;/strong&gt;，没错，是的，阿里巴巴，我面试的是专家岗，具体JD不透露了，纯技术的岗位。这次面试干货十分多。&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/15/%E5%B7%85%E5%B3%B0%E4%B9%8B%E8%B7%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/15/%E5%B7%85%E5%B3%B0%E4%B9%8B%E8%B7%AF/</guid>
        
        <category>interview</category>
        
        
      </item>
    
      <item>
        <title>大家好，我叫Daniel</title>
        <description>&lt;h2 id=&quot;新的开始&quot;&gt;新的开始&lt;/h2&gt;

&lt;p&gt;眼下2018即将到来了，我亦即将步入人生新的轨迹。新的一年，我打算取个地道的洋名儿 – &lt;code class=&quot;highlighter-rouge&quot;&gt;Daniel&lt;/code&gt; 。&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</guid>
        
        <category>daniel</category>
        
        
      </item>
    
      <item>
        <title>Swift 4 新特性</title>
        <description>&lt;h3 id=&quot;private-权限扩大&quot;&gt;private 权限扩大&lt;/h3&gt;

&lt;p&gt;在 Swift 4 中，&lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; 可以读取 &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; 变量了。&lt;/p&gt;

&lt;p&gt;Swift 3 中，如果将主体函数的变量定义为 &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;，则其 &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; 无法读取此变量，必须将其改为 &lt;code class=&quot;highlighter-rouge&quot;&gt;filePrivate&lt;/code&gt; 才可以。&lt;/p&gt;

&lt;h3 id=&quot;单向区间&quot;&gt;单向区间&lt;/h3&gt;

&lt;p&gt;单向区间是一个新的类型，主要分两种：确定上限和确定下限的区间。直接用字面量定义大概可以写成 &lt;code class=&quot;highlighter-rouge&quot;&gt;…6&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;2…&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// [0, 1, 2, 3]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// [3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;字符串改动&quot;&gt;字符串改动&lt;/h3&gt;

&lt;h4 id=&quot;string-操作简化了&quot;&gt;String 操作简化了&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 许多要通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;.characters&lt;/code&gt; 进行的操作，可以直接用 String 进行操作了。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, 😜!&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// No need to drill down to .characters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endOfSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;新增-substring-类型&quot;&gt;新增 Substring 类型&lt;/h4&gt;

&lt;p&gt;swift 4 为字符串片段新增了一个叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 的类型。&lt;/p&gt;

&lt;p&gt;当你创建一个字符串的片段时，会产生一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 实例。&lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 用法相同， 因为子串和原字符串共享内存，所以对子串的操作快速而且高效。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi there! It's nice to meet you! 👋&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endOfSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// 产生 Substring 实例&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endOfSentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// firstSentence == &quot;Hi there!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `Substring` 与 `String` 用法相同&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shoutingSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstSentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uppercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// shoutingSentence == &quot;HI THERE!&quot; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是要注意一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 保留从其生成的完整的 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;值。 当您传递一个看似很小的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 时，这可能导致意外的高内存开销。所以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt;时，最好转化为 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;换行可以不用-n了&quot;&gt;换行可以不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;了！&lt;/h4&gt;

&lt;p&gt;Swift 3，字符串换行要插入 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;。
例如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fjdam0wvhhj305d0283yf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Swift 4 可以这样操作:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fjdas2yri4j303q0260sm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用两个 &lt;code class=&quot;highlighter-rouge&quot;&gt;“”“&lt;/code&gt; 包裹起来的字符串会自动添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; 换行，更加直观了。注意：换行与缩进参照的是第二个 &lt;code class=&quot;highlighter-rouge&quot;&gt;“”“&lt;/code&gt; 号的位置。&lt;/p&gt;

&lt;p&gt;嗯，我觉得OK！&lt;/p&gt;

&lt;h4 id=&quot;支持-unicode-9&quot;&gt;支持 Unicode 9&lt;/h4&gt;

&lt;p&gt;Swift 4 支持 Unicode 9，&lt;a href=&quot;https://oleb.net/blog/2016/12/emoji-4-0/&quot;&gt;为现代表情符号修正了一些问题&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;👨‍👩‍👧‍👦&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;👨&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u{200D}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;👩&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u{200D}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;👧&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u{200D}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;👦&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;family1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// → true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;居然还有这种操作~&lt;/p&gt;

&lt;h3 id=&quot;新增-keypath-数据类型&quot;&gt;新增 KeyPath 数据类型&lt;/h3&gt;

&lt;p&gt;KeyPath 是 Swift 4 新增加的数据类型。&lt;/p&gt;

&lt;p&gt;定义两个结构体 &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;primaryAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;abelson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Harold Abelson&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sussman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Gerald Jay Sussman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Structure and Interpretation of Computer Programs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abelson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sussman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 相当与&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里 &lt;code class=&quot;highlighter-rouge&quot;&gt;\Book.title&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;\Book.primaryAuthor.name&lt;/code&gt; 就是 KeyPath.&lt;/p&gt;

&lt;p&gt;KeyPath 可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.appending&lt;/code&gt; 拼接&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authorKeyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryAuthor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nameKeyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorKeyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nameKeyPath = \Book.primaryAuthor.name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;新增--swapat-函数&quot;&gt;新增  &lt;code class=&quot;highlighter-rouge&quot;&gt;swapAt()&lt;/code&gt; 函数&lt;/h3&gt;
&lt;p&gt;Swift 4 引入了一种在集合中交换两个元素的新方法: &lt;code class=&quot;highlighter-rouge&quot;&gt;swapAt()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Swift 3 交换集合中的元素的用 &lt;code class=&quot;highlighter-rouge&quot;&gt;swap()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// numbers = [2,1,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Swift 4 中可以直接用&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swapAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// numbers = [2,1,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;其他改动&quot;&gt;其他改动&lt;/h3&gt;

&lt;p&gt;其他改动如：&lt;strong&gt;新的整数协议&lt;/strong&gt;、&lt;strong&gt;泛型下标&lt;/strong&gt;、&lt;strong&gt;NSNumber bridging&lt;/strong&gt;等&lt;/p&gt;

&lt;p&gt;可以参考：&lt;a href=&quot;https://github.com/ole/whats-new-in-swift-4&quot;&gt;whats new in swift4&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/11/Swift-4-%E6%96%B0%E7%89%B9%E6%80%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/11/Swift-4-%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        
      </item>
    
  </channel>
</rss>
