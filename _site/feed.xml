<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小智|主页</title>
    <description>为自己留退路的人，最终都走在退路上。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 15 Dec 2017 19:37:51 +0800</pubDate>
    <lastBuildDate>Fri, 15 Dec 2017 19:37:51 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>巅峰之路</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;我的目标只有AT，也知道AT的面试难度绝对非泛泛之辈。历经秋季发生的种种失望和彷徨后，我决定采取行动了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这是一篇经验之谈，不会仔细聊具体内容等。请自行Google具体概念的细节。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;预准备&quot;&gt;预准备&lt;/h2&gt;
&lt;p&gt;6月份前后，已经有不少猎头找到我，我也留下他们的联系方式，高水平的猎头往往能提供有价值的岗位，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;深圳蚂蚁金服&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;北京Face++&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;阿里摩达学院&lt;/code&gt;等。
接触某些猎头后，我提前让他们提供我感兴趣的岗位的&lt;code class=&quot;highlighter-rouge&quot;&gt;Job Description&lt;/code&gt;，以便我做对应的准备。&lt;/p&gt;

&lt;p&gt;在面试预准备阶段，结合我对不同公司的风格和一些岗位的JD，我给自己规划了几个大概的方向：&lt;code class=&quot;highlighter-rouge&quot;&gt;C++基础语法&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Java基础&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;并发编程&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;系统架构设计&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;开源架构/组件&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Linux 
Shell&lt;/code&gt;等。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;系统架构设计&lt;/code&gt;是一块非常庞大的部分，就我参与过的项目里，涵盖了两种类型的后端服务：&lt;code class=&quot;highlighter-rouge&quot;&gt;数据读写服务&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;交易系统&lt;/code&gt;。
不同类型的后端服务的设计需求也尽然不同：&lt;code class=&quot;highlighter-rouge&quot;&gt;数据读写服务&lt;/code&gt;的要求是&lt;code class=&quot;highlighter-rouge&quot;&gt;高性能读写&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;系统高可用&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;高容灾能力&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;数据持久化&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;异地多活&lt;/code&gt;等；
而对于典型的&lt;code class=&quot;highlighter-rouge&quot;&gt;交易系统&lt;/code&gt;，设计要求则需要解决诸多典型的领域问题：&lt;code class=&quot;highlighter-rouge&quot;&gt;分布式唯一递增ID方案设计&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;支付安全性设计&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;支付架构&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;订单幂等性&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;超时重试&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;状态机转移&lt;/code&gt;等。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;项目的经验总结十分重要。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;值得一提的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;，在我接触过的业务开发里，并不需要直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;java nio&lt;/code&gt;，作为程序底层编程基础部分、已被各种常用框架屏蔽掉的Java NewIO，在面试中到底是多重要呢？
就我后来面试的经历中，「了解/熟悉/精通Java NIO」会成为一个十分重要的加分项，被问询到的概率也很高。当然，这还是会与具体的&lt;code class=&quot;highlighter-rouge&quot;&gt;JD&lt;/code&gt;挂钩的。在很早前，其中一位猎头提供的JD里有明确的熟悉&lt;code class=&quot;highlighter-rouge&quot;&gt;Netty&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Java NIO&lt;/code&gt;优先，
因此，在面试的预准备阶段，我特意花了2周啃&lt;code class=&quot;highlighter-rouge&quot;&gt;Thrift&lt;/code&gt;JAVA版本的实现以及&lt;code class=&quot;highlighter-rouge&quot;&gt;Netty&lt;/code&gt;的实现，主要是NIO部分。RPC是一个专业领域，除了NIO，还包括了&lt;code class=&quot;highlighter-rouge&quot;&gt;序列化&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket编程&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP粘包/拆包&lt;/code&gt;等诸多领域问题。
就&lt;code class=&quot;highlighter-rouge&quot;&gt;rpc&lt;/code&gt;相关，我看完了&lt;code class=&quot;highlighter-rouge&quot;&gt;MtThrift&lt;/code&gt;的实现，&lt;code class=&quot;highlighter-rouge&quot;&gt;Mtthrift&lt;/code&gt;主要包括了 类和接口代理模式、均衡负载、NIO、MTraceBinary协议实现、高可用功能如过载保护等。NIO部分可以参考&lt;code class=&quot;highlighter-rouge&quot;&gt;React设计模式&lt;/code&gt;，颇有收益。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NIO是后端工程师必须了解甚至掌握的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大约，我花了4天的时间复习了一遍「亿级流量网站架构核心技术」这本书。身边有朋友吐槽这本书质量略差，这里不予置评。我带有十分明确的目标去看：在这本书里我主要是要吸取了一些非常重要的概念，包括如何支持高并发、如何构建高可用。
看完一本书的目标并非能让你在短时间内编出一个虚构的、厉害的项目经历，而是通过这种整体性的总结，回顾以前的项目，找出以前的不足，总结以前参与过的项目里的问题、积累经验、设计优化等诸多地方。&lt;/p&gt;

&lt;h2 id=&quot;准备篇-1-知识深化&quot;&gt;准备篇 #1 知识深化&lt;/h2&gt;
&lt;p&gt;大家一定注意到，刚才的说到的只是预准备。其中&lt;code class=&quot;highlighter-rouge&quot;&gt;系统架构设计&lt;/code&gt;部分，是我在后来做的总结（在预备期我并没总结得这么全）。有了一个大概的预备期，接下来，这才是巅峰之路的启程。
我准备的大概思路大概是：Java基础为主，基础以并发为主、JVM为辅，逐渐（边面试边攻克）解决项目部分，最后再攻克开源部分。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;请坐稳扶好，我准备开车了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;11-并发编程篇&quot;&gt;1.1 并发编程篇&lt;/h3&gt;
&lt;p&gt;经历过那么多Java岗位的面试，&lt;code class=&quot;highlighter-rouge&quot;&gt;并发&lt;/code&gt;无疑是热门的基础问题Top 1。在准备&lt;code class=&quot;highlighter-rouge&quot;&gt;并发&lt;/code&gt;这部分内容时，我使用得不多，对于那时的我来很迷茫，也没有人指点在哪个方向准备起：
这个究竟是个经验的问题，有多少功力也不是靠背书读概念就积累起来的。但是总不能坐以待毙吧？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;你肯定想问我，你还没面试怎么就知道「并发」是top1热门？
告诉你，面试启动之前，我找了些同事沟通，以及结合百度做参考的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;112-volatile关键字&quot;&gt;1.1.2 volatile关键字&lt;/h4&gt;
&lt;p&gt;有人提点了我一些基础的内容，没错，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Java并发&lt;/code&gt;的三大基础之一，&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;修饰符。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;的基础要点:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 有哪三大特性？
2. 如何保证可见性？
3. 为什么不保证操作原子性？
4. 禁止指令重排序的原理？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;注意：并发是java top1问题，volatile是并发的top1问题
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;113-内存屏障内存模型&quot;&gt;1.1.3 内存屏障/内存模型&lt;/h4&gt;
&lt;p&gt;如果你在volatile上提到了指令重排序，面试官很有可能会问到内存屏障相关问题，内存屏障的实质就是将底层CPU指令做了顺序限制。有兴趣可以了解一下相关的博客。
&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JMM的原理要点&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. JMM(Java Memory Model)是什么？
2. 原理是什么？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;114-线程状态和monitor&quot;&gt;1.1.4 线程状态和Monitor&lt;/h4&gt;
&lt;p&gt;线程状态比较容易理解，但要注意一点：操作系统的线程状态和Java的线程状态是有区别的。
操作系统的线程状态有5个：新建、就绪、运行、阻塞、结束。而Java线程状态则有6种：&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;running&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;blocking&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;time wait&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;runnable&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;dead&lt;/code&gt;。
关于Java的线程状态大有学问：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Java线程的time wait和blocking区别是什么？
2. 线程状态之间的转移条件？
3. 怎么理解线程Monitor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java线程状态转移的内容在&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.java&lt;/code&gt;里做了十分详细的注释，建议没看过的看一下，对于打扎实Java多线程编程基础有一定帮助。
线程状态及转移比较基础，面试问到的频率比较低。线程monitor是一个概念，有必要理解一下。&lt;/p&gt;

&lt;h4 id=&quot;115-并发集合&quot;&gt;1.1.5 并发集合&lt;/h4&gt;
&lt;p&gt;基础扎实的同学一定听过&lt;code class=&quot;highlighter-rouge&quot;&gt;JUC&lt;/code&gt;，没错，并发集合说的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent&lt;/code&gt;的子集（JUC）。&lt;/p&gt;

&lt;p&gt;并发集合主要包括几个经典的集合：&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyOnWriteArrayList&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedBlockingQueue&lt;/code&gt;。
&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentHashMap&lt;/code&gt;是比较常用的数据结构，必须掌握.
&lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedBlockingQueue&lt;/code&gt;是生产者/消费者模式的实现，也是线程池默认队列，也必须掌握.
&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyOnWriteArrayList&lt;/code&gt;建议掌握，问得比较少.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.`ConcurrentHashMap` 在JDK1.6采用了分段+数组+链表，其中，段继承了重入锁
2.`ConcurrentHashMap` 在JDK1.7则采用了无锁cas代替了重入锁
3.`ConcurrentHashMap` 在JDK1.8则是将链表部分做了优化，在链表长度大于8时升级为红黑树
4.`LinkedBlockingQueue` 本身就是生产者/消费者模式的实现
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LinkedBlockingQueue提供了好几个 &lt;code class=&quot;highlighter-rouge&quot;&gt;生产&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;消费&lt;/code&gt; 的方法，它们的区别在于获取&lt;code class=&quot;highlighter-rouge&quot;&gt;putLock&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;takeLock&lt;/code&gt;时，采用的重入锁的不同&lt;code class=&quot;highlighter-rouge&quot;&gt;lock&lt;/code&gt;方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;lock()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;lockInterupt()
&lt;/code&gt;。详情参考JDK代码，深刻理解这部分代码，对生产者/消费者模型的理解十分有帮助。&lt;/p&gt;

&lt;p&gt;上面都是常用/常见的并发/同步集合。除了集合，还有常用的辅助类:&lt;code class=&quot;highlighter-rouge&quot;&gt;CyclicBarrier&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;CountDownLaunch&lt;/code&gt;。在代码里我只用过&lt;code class=&quot;highlighter-rouge&quot;&gt;CountDownLaunch&lt;/code&gt;，属于比较常用和必须掌握的基础。&lt;/p&gt;

&lt;h4 id=&quot;116-线程池&quot;&gt;1.1.6 线程池&lt;/h4&gt;
&lt;p&gt;线程池大家都很熟悉，通常用于处理异步事件。线程池也是面试的高频热点。根据我不同的面试体验，我对线程池这部的内容体会是，每次面试都让我感到我对线程池的认知是不足的。
建议大家读一下线程池的代码，包含几个要点，也是我面试遇到的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.keep_alive参数的作用？
2.core_size/largest_size含义？
3.线程池工作流程？
4.线程的生命周期？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面是线程池的高频问题，大家可以充分准备一下。另外值得一提的是&lt;code class=&quot;highlighter-rouge&quot;&gt;线程池的状态&lt;/code&gt;，状态的转移比较难理解，在面试的时候也很少出现。但是理解线程池的状态转移有助于对线程池的理解加深。
我在学习线程池的时候主要是几个方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.worker的实现，生命周期
2.新创建线程的流程
3.带返回值的task的.submit(Runnable)方法的实现原理
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;线程池不敢说学得很深，不好在大家面前班门弄斧。多多指教！&lt;/p&gt;

&lt;h4 id=&quot;117-synchronized和reetrantlock&quot;&gt;1.1.7 Synchronized和ReetrantLock&lt;/h4&gt;
&lt;p&gt;这个题目基本不用多少，高频题目。它们关键区别在于synchronized是基于字节码实现的，lock是基于信号量实现的。在面试的时候，这两者的尽量讲详细点。
除了实现上，lock还提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;tryLock()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;lockInterupt()&lt;/code&gt;方法。这两方法的实现细节见代码详情。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReetrantLock&lt;/code&gt;的默认Lock是非公平锁。&lt;code class=&quot;highlighter-rouge&quot;&gt;Lock&lt;/code&gt;还提供了公平锁。这两者的区别在于获取锁的时候是否进入队列。这是必懂知识点。
而它的实现原理，是在AQS，即&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractQueuedSynchronizer&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;118-abstractqueuedsynchronizer&quot;&gt;1.1.8 AbstractQueuedSynchronizer&lt;/h4&gt;
&lt;p&gt;高端面试题会出现这个同步器的原理问题。在阿里的一面就问到了这个。主要是介绍一下&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractQueuedSynchronizer&lt;/code&gt;的状态唤醒实现，锁实现原理。&lt;/p&gt;

&lt;h3 id=&quot;12-开源框架&quot;&gt;#1.2 开源框架&lt;/h3&gt;
&lt;p&gt;并发是我准备的很大一部分，我的简历策略是扬长避短，将熟悉的东西、学会的东西写上去，不懂的只字不提。所以再后来我找些同事帮我review简历的时候大家都说简历写得很简单。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我略愁，没有把握的我是不会写的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;121-jetty&quot;&gt;1.2.1 Jetty&lt;/h4&gt;
&lt;p&gt;我虽然准备了，也啃了jetty的部分代码，但是基本不会问，参考价值不大。因为面试官也不一定有相关的技术栈。&lt;/p&gt;

&lt;h3 id=&quot;13-shell编程&quot;&gt;#1.3 Shell编程&lt;/h3&gt;
&lt;p&gt;事实上，java的启动是由一句&lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar bootstrap.java&lt;/code&gt; balala 等一句命令执行的，我特意在面试时看了一下发布的脚本。作为基础的基础，没有人问，但你要会。&lt;/p&gt;

&lt;h4 id=&quot;131-awk&quot;&gt;1.3.1 awk&lt;/h4&gt;
&lt;p&gt;不用解释太多，用awk统计一下QPS。&lt;/p&gt;

&lt;h4 id=&quot;132-sed&quot;&gt;1.3.2 sed&lt;/h4&gt;
&lt;p&gt;如何将多个文本的关键字快速替换？你还是懂的。&lt;/p&gt;

&lt;p&gt;当然，shell编程远不止这些，我特意翻回了我以前写过的脚本shell复习了&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;等一些常用的命令来复习。掌握这些还是很有必要的，&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;的考察率超过了&lt;code class=&quot;highlighter-rouge&quot;&gt;60%&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;准备篇-2-知识巩固&quot;&gt;准备篇 #2 知识巩固&lt;/h2&gt;
&lt;p&gt;你没有看错，在准备#1篇里，我基本只准备了&lt;code class=&quot;highlighter-rouge&quot;&gt;java多线程&lt;/code&gt;。但是从&lt;code class=&quot;highlighter-rouge&quot;&gt;NIO&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;jetty&lt;/code&gt;，到&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;，到&lt;code class=&quot;highlighter-rouge&quot;&gt;多线程编程&lt;/code&gt;，我足足从8月底准备到了10月份。匆匆准备完毕后，10月9号，我就投递了第一份简历了。&lt;/p&gt;

&lt;p&gt;为了大家更容易理解，我就不穿插&lt;code class=&quot;highlighter-rouge&quot;&gt;知识巩固&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;面试1&lt;/code&gt;这两部分的内容。准备篇#2将直接介绍面试中遇到的问题，并作为知识巩固，我是如何操作的。&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/15/%E5%B7%85%E5%B3%B0%E4%B9%8B%E8%B7%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/15/%E5%B7%85%E5%B3%B0%E4%B9%8B%E8%B7%AF/</guid>
        
        <category>interview</category>
        
        
      </item>
    
      <item>
        <title>大家好，我叫Daniel</title>
        <description>&lt;h2 id=&quot;新的开始&quot;&gt;新的开始&lt;/h2&gt;

&lt;p&gt;眼下2018即将到来了，我亦即将步入人生新的轨迹。新的一年，我打算取个地道的洋名儿 – &lt;code class=&quot;highlighter-rouge&quot;&gt;Daniel&lt;/code&gt; 。&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</guid>
        
        <category>daniel</category>
        
        
      </item>
    
      <item>
        <title>Swift 4 新特性</title>
        <description>&lt;h3 id=&quot;private-权限扩大&quot;&gt;private 权限扩大&lt;/h3&gt;

&lt;p&gt;在 Swift 4 中，&lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; 可以读取 &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; 变量了。&lt;/p&gt;

&lt;p&gt;Swift 3 中，如果将主体函数的变量定义为 &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;，则其 &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; 无法读取此变量，必须将其改为 &lt;code class=&quot;highlighter-rouge&quot;&gt;filePrivate&lt;/code&gt; 才可以。&lt;/p&gt;

&lt;h3 id=&quot;单向区间&quot;&gt;单向区间&lt;/h3&gt;

&lt;p&gt;单向区间是一个新的类型，主要分两种：确定上限和确定下限的区间。直接用字面量定义大概可以写成 &lt;code class=&quot;highlighter-rouge&quot;&gt;…6&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;2…&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// [0, 1, 2, 3]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// [3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;字符串改动&quot;&gt;字符串改动&lt;/h3&gt;

&lt;h4 id=&quot;string-操作简化了&quot;&gt;String 操作简化了&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 许多要通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;.characters&lt;/code&gt; 进行的操作，可以直接用 String 进行操作了。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, 😜!&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// No need to drill down to .characters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endOfSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;新增-substring-类型&quot;&gt;新增 Substring 类型&lt;/h4&gt;

&lt;p&gt;swift 4 为字符串片段新增了一个叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 的类型。&lt;/p&gt;

&lt;p&gt;当你创建一个字符串的片段时，会产生一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 实例。&lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 用法相同， 因为子串和原字符串共享内存，所以对子串的操作快速而且高效。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi there! It's nice to meet you! 👋&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endOfSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// 产生 Substring 实例&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endOfSentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// firstSentence == &quot;Hi there!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `Substring` 与 `String` 用法相同&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shoutingSentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstSentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uppercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// shoutingSentence == &quot;HI THERE!&quot; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是要注意一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 保留从其生成的完整的 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;值。 当您传递一个看似很小的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt; 时，这可能导致意外的高内存开销。所以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Substring&lt;/code&gt;时，最好转化为 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;换行可以不用-n了&quot;&gt;换行可以不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;了！&lt;/h4&gt;

&lt;p&gt;Swift 3，字符串换行要插入 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;。
例如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fjdam0wvhhj305d0283yf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Swift 4 可以这样操作:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fjdas2yri4j303q0260sm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用两个 &lt;code class=&quot;highlighter-rouge&quot;&gt;“”“&lt;/code&gt; 包裹起来的字符串会自动添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; 换行，更加直观了。注意：换行与缩进参照的是第二个 &lt;code class=&quot;highlighter-rouge&quot;&gt;“”“&lt;/code&gt; 号的位置。&lt;/p&gt;

&lt;p&gt;嗯，我觉得OK！&lt;/p&gt;

&lt;h4 id=&quot;支持-unicode-9&quot;&gt;支持 Unicode 9&lt;/h4&gt;

&lt;p&gt;Swift 4 支持 Unicode 9，&lt;a href=&quot;https://oleb.net/blog/2016/12/emoji-4-0/&quot;&gt;为现代表情符号修正了一些问题&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;👨‍👩‍👧‍👦&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;👨&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u{200D}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;👩&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u{200D}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;👧&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u{200D}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;👦&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;family1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// → true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;居然还有这种操作~&lt;/p&gt;

&lt;h3 id=&quot;新增-keypath-数据类型&quot;&gt;新增 KeyPath 数据类型&lt;/h3&gt;

&lt;p&gt;KeyPath 是 Swift 4 新增加的数据类型。&lt;/p&gt;

&lt;p&gt;定义两个结构体 &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;primaryAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;abelson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Harold Abelson&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sussman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Gerald Jay Sussman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Structure and Interpretation of Computer Programs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abelson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sussman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 相当与&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里 &lt;code class=&quot;highlighter-rouge&quot;&gt;\Book.title&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;\Book.primaryAuthor.name&lt;/code&gt; 就是 KeyPath.&lt;/p&gt;

&lt;p&gt;KeyPath 可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.appending&lt;/code&gt; 拼接&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authorKeyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryAuthor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nameKeyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorKeyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// nameKeyPath = \Book.primaryAuthor.name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;新增--swapat-函数&quot;&gt;新增  &lt;code class=&quot;highlighter-rouge&quot;&gt;swapAt()&lt;/code&gt; 函数&lt;/h3&gt;
&lt;p&gt;Swift 4 引入了一种在集合中交换两个元素的新方法: &lt;code class=&quot;highlighter-rouge&quot;&gt;swapAt()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Swift 3 交换集合中的元素的用 &lt;code class=&quot;highlighter-rouge&quot;&gt;swap()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// numbers = [2,1,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Swift 4 中可以直接用&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swapAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// numbers = [2,1,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;其他改动&quot;&gt;其他改动&lt;/h3&gt;

&lt;p&gt;其他改动如：&lt;strong&gt;新的整数协议&lt;/strong&gt;、&lt;strong&gt;泛型下标&lt;/strong&gt;、&lt;strong&gt;NSNumber bridging&lt;/strong&gt;等&lt;/p&gt;

&lt;p&gt;可以参考：&lt;a href=&quot;https://github.com/ole/whats-new-in-swift-4&quot;&gt;whats new in swift4&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/11/Swift-4-%E6%96%B0%E7%89%B9%E6%80%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/11/Swift-4-%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        
      </item>
    
  </channel>
</rss>
